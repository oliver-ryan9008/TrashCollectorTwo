@model IEnumerable<TrashCollector2.Models.Customer>

@{
    ViewBag.Title = "Pickup Map";
}
@{ List<string> addresses = new List<string>(); }

@foreach (var item in Model)
{
    if (item.ZipCode == ViewBag.zip)
    {
        string address = item.StreetAddress + ", " + item.ZipCode.ToString();
        addresses.Add(address);
    }
}

<h2></h2>

<section class="scripts">
    <script>
        function initMap() {
            var bounds = new google.maps.LatLngBounds;
            var markersArray = [];            
            var origin1 = "@(ViewBag.zip)";
            var homeIcon = "http://maps.google.com/mapfiles/ms/icons/homegardenbusiness.png";
            var destIcon = "http://maps.google.com/mapfiles/ms/icons/flag.png";

            var destinationArray = [];

            @foreach (var a in addresses)
        {
            <text> destinationArray.push("@a"); </text>
        }

            var destinationIcon = destIcon;
            var originIcon = homeIcon;
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { origin1 },
                zoom: 10
            });
            var geocoder = new google.maps.Geocoder;

            var service = new google.maps.DistanceMatrixService;
            service.getDistanceMatrix({
                origins: [origin1],
                destinations: destinationArray,
                travelMode: 'DRIVING',
                unitSystem: google.maps.UnitSystem.IMPERIAL,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {
                if (status !== 'OK') {
                    alert('Error was: ' + status);
                } else {
                    var originList = response.originAddresses;
                    var destinationList = response.destinationAddresses;
                    deleteMarkers(markersArray);

                    var showGeocodedAddressOnMap = function (asDestination) {
                        var icon = asDestination ? destinationIcon : originIcon;
                        return function (results, status) {
                            if (status === 'OK') {
                                map.fitBounds(bounds.extend(results[0].geometry.location));
                                markersArray.push(new google.maps.Marker({
                                    map: map,
                                    position: results[0].geometry.location,
                                    icon: icon
                                }));
                            } else {
                                alert('Geocode was not successful due to: ' + status);
                            }
                        };
                    };

                    for (var i = 0; i < originList.length; i++) {
                        debugger;
                        var results = response.rows[i].elements;
                        geocoder.geocode({ 'address': originList[i] },
                            showGeocodedAddressOnMap(false));
                        for (var j = 0; j < results.length; j++) {
                            geocoder.geocode({ 'address': destinationList[j] },
                                showGeocodedAddressOnMap(true));
                        }
                    }

                }
            });
        }

        function deleteMarkers(markersArray) {
            for (var i = 0; i < markersArray.length; i++) {
                markersArray[i].setMap(null);
            }
            markersArray = [];
        }
    </script>


    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCGvhu29zeuR47fvfZF6LFwtErw3wkqx8M&callback=initMap">

    </script>

    <div id="map" style="width : 1280px; height : 720px; display: block; margin-left: auto; margin-right: auto;">

    </div>
    </section>